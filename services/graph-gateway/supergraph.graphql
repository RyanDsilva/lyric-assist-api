schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
}

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  SONGS_SUBGRAPH @join__graph(name: "songs-subgraph", url: "http://songs-subgraph:3000/graphql")
  USERS_SUBGRAPH @join__graph(name: "users-subgraph", url: "http://users-subgraph:3000/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: SONGS_SUBGRAPH)
  @join__type(graph: USERS_SUBGRAPH)
{
  allSongs: [Song] @join__field(graph: SONGS_SUBGRAPH)

  """Returns the current authenticated user"""
  me: User! @join__field(graph: USERS_SUBGRAPH)
}

type Song
  @join__type(graph: SONGS_SUBGRAPH, key: "id")
{
  id: ID!
  title: String
}

type User
  @join__type(graph: USERS_SUBGRAPH, key: "id")
{
  """Unique ID"""
  id: ID!

  """User's email, used for login and communications"""
  email: String!

  """Hashed password"""
  password: String! @inaccessible

  """User's name"""
  name: String!
}
